---
import { getCollection } from 'astro:content';
const collection = await getCollection('collection');
import * as indexMDX from './_index.mdx';
import Page from './_index';
import { Pointer } from './_pointer';
const [USER, REPO] = import.meta.env.GITHUB_REPOSITORY.split('/');
const sha = import.meta.env.GITHUB_SHA;
const date = new Date();
let data;
try {
  const response = await fetch(import.meta.env.GITHUB_GRAPHQL_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${import.meta.env.GITHUB_TOKEN}`,
    },
    body: JSON.stringify({
      query: `query {
        user(login:"${USER}") {
          login
          url
          websiteUrl
          name
          avatarUrl
          bio
          company
          email
          isHireable
          location
          pronouns
          followers { totalCount }
          following { totalCount }
          status { message }
          socialAccounts(first:4) {
            edges {
              node {
                url
              }
            }
          }
          repository(name:"${REPO}") {
            description
       	  }
          pinnedItems(first:6) {
            edges {
              node {
                ... on Repository {
                  collaborators { totalCount }
                  description
                  forks { totalCount }
                  homepageUrl
                  languages(first:99,orderBy:{direction:DESC,field:SIZE}) {
                    totalSize
                    edges {
                      node { name color }
                      size
                    }
                  }
                  name
                  owner { login url }
                  stargazers { totalCount }
                  url
                  watchers { totalCount }
                }
              }
            }
          }
        }
      }
      `,
    }),
  });
  const json = await response.json();
  data = json.data;
} catch (error) {
  console.error(error);
}
let readme;
try {
  const response = await fetch(
    `${import.meta.env.GITHUB_API_URL}/repos/${USER}/${REPO}/readme`,
    {
      headers: {
        Accept: 'application/vnd.github.html+json',
      },
    }
  );
  readme = response.status == 200 ? await response.text() : undefined;
} catch (error) {
  console.log(error);
}
let userReadme;
try {
  const response = await fetch(
    `${import.meta.env.GITHUB_API_URL}/repos/${USER}/${USER}/readme`,
    {
      headers: {
        Accept: 'application/vnd.github.html+json',
      },
    }
  );
  userReadme = response.status == 200 ? await response.text() : undefined;
} catch (error) {
  console.log(error);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
      {
        data?.user?.repository?.description
          ? data?.user?.repository?.description
          : data?.user?.name
      }
    </title>
    <link
      href="https://api.fontshare.com/v2/css?f[]=satoshi@1&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://api.fontshare.com/v2/css?f[]=melodrama@1&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://api.fontshare.com/v2/css?f[]=jet-brains-mono@1,2&display=swap"
      rel="stylesheet"
    />
  </head>
  <body
    class="bg-black text-white h-svh w-svw font-['Satoshi'] [font-size:clamp(0.5rem,1.618vmin,1rem)] cursor-none"
  >
    <Pointer size="32" hover="data-hover-pointer" client:only="react" />
    <Page
      client:load
      data={data}
      collection={collection}
      backgroundImage={''}
      mdx={indexMDX}
      sha={sha}
      date={date}
      readme={readme}
      userReadme={userReadme}
    >
      <indexMDX.Content />
    </Page>
  </body>
</html>

<style is:global>
  ::-webkit-scrollbar {
    display: none;
  }
  ::selection {
    background-color: rgba(0, 0, 0, 0.1);
  }
  article {
    @apply prose text-white max-w-full;
  }
  footer article {
    @apply text-sm;
  }
  article * {
    @apply text-white;
  }
  footer article * {
    @apply text-black;
  }
  article a {
    @apply underline-offset-8 cursor-none underline hover:underline-offset-[1.5px] transition-all inline-block;
  }
  footer article a {
    @apply underline-offset-4;
  }
  article a svg {
    @apply hidden;
  }
  article div {
    @apply flex;
  }
  article blockquote {
    @apply border-none px-[1em];
  }
  article blockquote p {
    @apply text-center font-normal not-italic;
  }
  article blockquote p:first-of-type::before,
  article blockquote p:first-of-type::after {
    @apply content-none;
  }
  article p code {
    @apply px-1.5 py-1 text-black bg-white rounded font-normal before:content-none after:content-none font-['JetBrains_Mono'];
  }
  article pre {
    @apply bg-transparent border border-white rounded-none !important;
  }
  article pre code span {
    @apply font-['JetBrains_Mono'];
  }
  article hr {
    @apply border-white;
  }
  article li::marker {
    @apply text-white;
  }
  article sup a,
  article sub a,
  article section ol li p a {
    @apply no-underline;
  }
  /* article astro-slot :last-child {
    @apply mb-0;
  } */
</style>

<script>
  import LocomotiveScroll from 'locomotive-scroll';
  const locomotiveScroll = new LocomotiveScroll();
</script>
